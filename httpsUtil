###----------------绕过证书版本start-----------

package com.huawei.mw.parser.webservice.restful;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Map;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import net.sf.json.JSONObject;

public class HttpPost
{
    private final static HostnameVerifier DO_NOT_VERIFY = new HostnameVerifier() {
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    };

    private static void trustAllHosts() {
        // Create a trust manager that does not validate certificate chains
        X509TrustManager tm = new X509TrustManager() {  
            @Override  
            public void checkClientTrusted(X509Certificate[] chain,  
                    String authType) throws CertificateException {  
            }  
            @Override  
            public void checkServerTrusted(X509Certificate[] chain,  
                    String authType) throws CertificateException {  
            }  
            @Override  
            public X509Certificate[] getAcceptedIssuers() {  
                return new X509Certificate[]{};  
            }  
    };  
    TrustManager[] trustAllCerts = new TrustManager[]{tm};
        try {
            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static   String https(String url, Map<String, String> params) throws Exception {
        // 构建请求参数
                String result = "";
                PrintWriter out = null;
                BufferedReader in = null;
                
                String sendString = "";
                JSONObject json = JSONObject.fromObject(params);
                System.out.println("发送报文:" + json.toString());
                sendString = json.toString();

                System.out.println("ERP连接:" + url);
                System.out.println("发送给ERP信息:" + sendString);
                 
                 try {
                     trustAllHosts();
                    URL url2 = new URL(url);
                    
                    HttpsURLConnection urlCon = (HttpsURLConnection) url2.openConnection();
                    urlCon.setHostnameVerifier(DO_NOT_VERIFY);
                    urlCon.setDoOutput(true);
                    urlCon.setDoInput(true);
                    urlCon.setRequestMethod("POST");
                    urlCon.setRequestProperty("Content-type", "application/json;charset=UTF-8");
                    // 发送POST请求必须设置如下两行
                    urlCon.setDoOutput(true);
                    urlCon.setDoInput(true);
                    // 获取URLConnection对象对应的输出流
                    OutputStream os = urlCon.getOutputStream(); 
                    //参数是键值队  , 不以"?"开始 
                    os.write(sendString.getBytes()); 
                    //os.write("googleTokenKey=&username=admin&password=5df5c29ae86331e1b5b526ad90d767e4".getBytes()); 
                    os.flush();
                    // 发送请求参数
                    //out.print(a);
                    // flush输出流的缓冲
                    //out.flush();
                    // 定义BufferedReader输入流来读取URL的响应
                    in = new BufferedReader(
new InputStreamReader(urlCon.getInputStream()));
                    String line;
                    while ((line = in.readLine()) != null) {
                        result += line;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {// 使用finally块来关闭输出流、输入流
                    try {
                        if (out != null) {
                            out.close();
                        }
                        if (in != null) {
                            in.close();
                        }
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
                return result;
    }
    
public static String http(String url, Map<String, String> reqMap) throws Exception {

        URL u = null;

        HttpURLConnection con = null;

        // 构建请求参数

        //StringBuffer sb = new StringBuffer();
        String sendString = "" ;
        //String tradeCode = params.get(ParamsConfig.keyTradeCode);
        JSONObject json = JSONObject.fromObject(reqMap);
        System.out.println("发送报文:"+json.toString());
        sendString = json.toString();
        /*if(tradeCode.equals(TradeCode.TRANS_WXAPP_PAY) || tradeCode.equals(TradeCode.TRANS_APP_QUERY)
                || tradeCode.equals(TradeCode.TRANS_TYPE_COLLECT) || tradeCode.equals(TradeCode.TRANS_TYPE_QUERY_COLLECT_TXN)){
            JSONObject json = JSONObject.fromObject(params);
            System.out.println("发送报文:"+json.toString());
            sendString = json.toString();
        } else {
            if (params != null) {
    
                for (Entry<String, String> e : params.entrySet()) {
    
                    sb.append(e.getKey());
    
                    sb.append("=");
    
                    sb.append(e.getValue());
                    
                    sb.append("&");
    
                }
                sendString = sb.substring(0, sb.length() - 1);
            }
        }*/
        System.out.println("ERP连接:" + url);
        System.out.println("发送给ERP信息:" + sendString);
//        logger.info("ERP连接:" + url);
//        logger.info("发送给ERP信息:" + sb.toString());

        // 尝试发送请求

        try {

            u = new URL(url);

            con = (HttpURLConnection) u.openConnection();

            con.setRequestMethod("POST");

            con.setDoOutput(true);

            con.setDoInput(true);

            con.setUseCaches(false);
            
//            con.setConnectTimeout(300*1000);
//            
//            con.setReadTimeout(300*1000);
            
            con.setRequestProperty("Content-Type",
                    "application/x-www-form-urlencoded");

            OutputStreamWriter osw = new OutputStreamWriter(con
                    .getOutputStream(), "UTF-8");

            osw.write(sendString);

            osw.flush();

            osw.close();

        } catch (Exception e) {
            e.printStackTrace();
            throw new Exception("与服务器连接发生错误:"+e.getMessage());

        } finally {

            if (con != null) {

                con.disconnect();

            }

        }

        // 读取返回内容

        StringBuffer buffer = new StringBuffer();

        try {

            BufferedReader br = new BufferedReader(new InputStreamReader(con

            .getInputStream(), "UTF-8"));

            String temp;

            while ((temp = br.readLine()) != null) {

                buffer.append(temp);
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw new Exception("从服务器获取数据失败:"+e.getMessage());

        }
        
        return buffer.toString();

    }

}
###----------------绕过证书版本end-----------





###----------------证书版本start-----------
package com.huawei.mw.parser.webservice.restful;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Map;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

import org.apache.http.HttpEntity;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.config.RequestConfig.Builder;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.google.gson.Gson;
import com.huawei.anykit.log.logmgr.LogManager;
import com.huawei.anykit.log.logmgr.LogType;

public class HttpsUtil
{
    
    /**
     * POST方式
     */
    public static final String POST = "post";

    /**
     * GET方式
     */
    public static final String GET = "get";

    /**
     * 超时时间
     */
    private static final int TIMEOUT = 15000;

    /**
     * http status ok
     */
    private static final int HTTP_STATUS_OK = 200;

    /**
     * 数字证书路径
     */
    private static final String CERT_FILE = "configserver.jks";

    private static X509Certificate ca;
    
    
    /**
     * 获取https接口的调用结果
     *
     * @param url url
     * @param header header参数
     * @param obj obj
     * @return String 调用结果
     */
    @SuppressWarnings("unchecked")
    public String getHttpsResponsePost(String url, Map<String, Object> params)
    {
        CloseableHttpClient httpclient = null;
        //加载数字签名文件
        try
        {
            initCert();
            SSLContext sslContext = getSslContextByKeyStore();
            SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext);
            httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();
        }
        catch (Exception e)
        {
            LogManager.logError("loading cert file error", e, false);
        }
        HttpPost httpPost = new HttpPost(url);
        Builder builder = RequestConfig.custom().setConnectTimeout(TIMEOUT);
        builder = builder.setConnectionRequestTimeout(TIMEOUT).setSocketTimeout(TIMEOUT);

        RequestConfig requestConfig = builder.build();
        httpPost.setConfig(requestConfig);
        CloseableHttpResponse response;
        String result = "";
        try
        {
            
                Gson gson = new Gson();
                
                StringEntity stringEntity = new StringEntity(gson.toJson(params), "utf-8");
                httpPost.setEntity(stringEntity);
            
            httpPost.setHeader("Content-Type", "application/json; charset=UTF-8");
           

            response = httpclient.execute(httpPost);
//            LogManager.recordLog(LogType.info, "http response status: " + response.getStatusLine());
            if (response.getStatusLine().getStatusCode() == HTTP_STATUS_OK)
            {
                HttpEntity respentity = response.getEntity();
                result = EntityUtils.toString(respentity, "utf-8");
            }
        }
        catch (IOException e)
        {
            LogManager.recordLog(LogType.warn, e.getMessage(), e);
        }
        finally
        {
            try
            {
                httpclient.close();
            }
            catch (IOException e)
            {
                LogManager.recordLog(LogType.warn, e.getMessage(), e);
            }
        }
        return result;
    }
    
    
    /**
     * 读取数字签名
     */
    private void initCert()
    {
//        String rootPath = new HttpsUtil().getClass().getResource("/").getPath();
        String rootPath = System.getProperty("user.dir");
        String certPath = rootPath + File.separator + "config" +  File.separator + CERT_FILE;
        try (InputStream caInput =new FileInputStream(certPath))
        {
            ca = (X509Certificate) CertificateFactory.getInstance("X.509").generateCertificate(caInput);
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
            LogManager.logError("Cert file  not found", e, false);
        }
        catch (IOException e)
        {
            e.printStackTrace();
            LogManager.logError("DFA Cert IOException", e, false);
        }
        catch (CertificateException e)
        {
            e.printStackTrace();
            LogManager.logError("DFA Cert CertificateException", e, false);
        }
    }

    
    /**
     * 获取sslcontext
     * @return sslcontext
     * @throws KeyStoreException
     * @throws IOException
     * @throws NoSuchAlgorithmException
     * @throws CertificateException
     * @throws KeyManagementException
     */
    private  SSLContext getSslContextByKeyStore()
            throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, KeyManagementException
    {
        SSLContext sslContext = null;
        String keyStoreType = KeyStore.getDefaultType();
        KeyStore keyStore = KeyStore.getInstance(keyStoreType);
        keyStore.load(null, null);
        keyStore.setCertificateEntry("ca", ca);
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(keyStore);
        sslContext = SSLContext.getInstance("TLSv1.2");
        sslContext.init(null, trustManagerFactory.getTrustManagers(), new java.security.SecureRandom());
        return sslContext;
    }

}
###------------证书版本end---------
